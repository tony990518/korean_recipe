import React, { useMemo, useEffect } from "react";
import { BrowserRouter, Routes, Route, Link, useParams, useLocation, useNavigate } from "react-router-dom";

/**
 * K-Home MVP — React Router version
 * - Tailwind for styling
 * - DB-driven content (inline JSON). AdSense/Starter Kit removed.
 * - Clean Unicode: no stray backslashes in JSX/strings.
 * - Adds routes: "/" (Home), "/recipe/:id" (Recipe detail), and 404.
 * - Adds runtime self-tests including basic routing checks.
 */

// ---------- Types ----------
/** @typedef {{ label: string; amount?: string; note?: string; brand?: string; link?: string; image?: string }} Ingredient */
/** @typedef {{ text: string; time?: string; heat?: "low"|"med"|"high"; tip?: string; image?: string }} Step */
/** @typedef {{ spicy:number; salty:number; sweet:number; fermented:number }} FlavorProfile */
/** @typedef {{ id:string; title:string; hero:string; minutes:number; difficulty:"初"|"中"; servings:number; flavor:FlavorProfile; authentic:Ingredient[]; local:Ingredient[]; steps:Step[]; shortDescription?:string }} Recipe */

// ---------- DB ----------
const DB: { recipes: Recipe[] } = {
  recipes: [
    {
      id: "kimchi-stew",
      title: "泡菜鍋（김치찌개）",
      hero: "https://images.unsplash.com/photo-1572552635556-b8e9f7a0fc66?q=80&w=1600&auto=format&fit=crop",
      minutes: 30,
      difficulty: "初",
      servings: 2,
      flavor: { spicy: 3, salty: 3, sweet: 1, fermented: 4 },
      shortDescription: "發酵香明顯，微辣帶甜，湯感濃郁。",
      authentic: [
        { label: "熟成泡菜", amount: "300g", brand: "宗家", link: "#", image: "https://images.unsplash.com/photo-1604908176997-43162b16832d?q=80&w=800&auto=format&fit=crop" },
        { label: "五花肉", amount: "200g" },
        { label: "洋蔥", amount: "1/2 顆" },
        { label: "豆腐", amount: "1 塊" },
        { label: "고추장 辣椒醬", amount: "1 大匙", brand: "CJ", link: "#", image: "https://images.unsplash.com/photo-1625944529265-9a8bd2bb0182?q=80&w=800&auto=format&fit=crop" },
        { label: "辣椒粉(粗/細)", amount: "1 大匙", image: "https://images.unsplash.com/photo-1604908554007-9a5e6dc49e45?q=80&w=800&auto=format&fit=crop" },
        { label: "大蒜", amount: "2 瓣" },
        { label: "鯷魚/昆布高湯", amount: "600 ml" },
      ],
      local: [
        { label: "韓式泡菜(超市)", amount: "300g", note: "酸度較低可加少許醋" },
        { label: "五花肉", amount: "200g" },
        { label: "洋蔥", amount: "1/2 顆" },
        { label: "板豆腐", amount: "1 塊" },
        { label: "替代辣醬：辣椒醬+味噌+糖", amount: "各 1 小匙", note: "甜度↑ 發酵感↓" },
        { label: "辣椒粉", amount: "依口味" },
        { label: "大蒜", amount: "2 瓣" },
        { label: "昆布高湯粉 + 水", amount: "600 ml" },
      ],
      steps: [
        { text: "鍋中中火炒五花至微出油，入洋蔥炒軟。", heat: "med", time: "3 分", tip: "不要炒到焦，影響湯色" },
        { text: "下泡菜、大蒜拌炒出香。", heat: "med", time: "1–2 分" },
        { text: "入高湯、고추장、辣椒粉，煮滾後轉小火。", heat: "low", time: "10 分", tip: "表面持續小泡即是小火" },
        { text: "加入豆腐，試味調整鹽度與甜度。", heat: "low", time: "3–5 分", tip: "湯頭需帶發酵酸香" },
      ],
    },
    {
      id: "tteokbokki",
      title: "辣炒年糕（떡볶이）",
      hero: "https://images.unsplash.com/photo-1627360209316-8c0f24c6559a?q=80&w=1600&auto=format&fit=crop",
      minutes: 20,
      difficulty: "初",
      servings: 2,
      flavor: { spicy: 4, salty: 2, sweet: 2, fermented: 2 },
      shortDescription: "甜辣濃稠，年糕外裹醬、內心Q彈。",
      authentic: [
        { label: "年糕條", amount: "300g", image: "https://images.unsplash.com/photo-1617093727343-374aabf83b7d?q=80&w=800&auto=format&fit=crop" },
        { label: "魚板", amount: "150g" },
        { label: "고추장", amount: "1.5 大匙", brand: "CJ", link: "#", image: "https://images.unsplash.com/photo-1625944529265-9a8bd2bb0182?q=80&w=800&auto=format&fit=crop" },
        { label: "辣椒粉(粗/細)", amount: "1 大匙" },
        { label: "醬油", amount: "1 小匙" },
        { label: "糖", amount: "1 大匙" },
        { label: "水/高湯", amount: "400 ml" },
      ],
      local: [
        { label: "冷凍年糕", amount: "300g", note: "先溫水浸泡 10 分防外硬內芯" },
        { label: "甜不辣", amount: "150g", note: "口感較脆，風味較淡" },
        { label: "替代辣醬：辣椒醬+味噌+糖", amount: "比例 1:1:1" },
        { label: "醬油", amount: "1 小匙" },
        { label: "糖/蜂蜜", amount: "1 大匙" },
        { label: "水", amount: "400 ml" },
      ],
      steps: [
        { text: "小鍋入水與所有調味料煮滾。", heat: "high", time: "2–3 分" },
        { text: "加入年糕中小火煮至軟，期間輕拌防沾底。", heat: "med", time: "6–8 分", tip: "醬汁略稠、能掛住年糕即好" },
        { text: "加入魚板再煮 1–2 分，關火後靜置 1 分收醬。", heat: "low", time: "2–3 分" },
      ],
    },
  ],
};

// ---------- UI Helpers ----------
const HeatBadge = ({ level }:{ level:"low"|"med"|"high" }) => {
  const map:any = { low: "小火", med: "中火", high: "大火" };
  return (
    <span className="inline-flex items-center rounded-full border px-2 py-0.5 text-xs text-slate-700 border-slate-300 bg-white">
      {map[level]}
    </span>
  );
};

const FlavorMeter = ({ profile }:{ profile:FlavorProfile }) => {
  const Row = ({ label, v }:{label:string; v:number}) => (
    <div className="grid grid-cols-12 gap-2 items-center">
      <div className="col-span-3 text-sm text-slate-600">{label}</div>
      <div className="col-span-9 h-2 rounded bg-slate-200 overflow-hidden">
        <div className="h-full w-full origin-left bg-red-500" style={{ transform: `scaleX(${Math.min(1, Math.max(0, v/5))})` }}></div>
      </div>
    </div>
  );
  return (
    <div className="space-y-2">
      <Row label="辣度" v={profile.spicy} />
      <Row label="鹹度" v={profile.salty} />
      <Row label="甜度" v={profile.sweet} />
      <Row label="發酵感" v={profile.fermented} />
    </div>
  );
};

const AffiliateNotice = () => (
  <p className="text-xs text-slate-500">本文含合作夥伴連結，若您透過連結購買，我們可能獲得推薦分潤，但不影響您的價格。</p>
);

const StepImage = ({ url, color }:{ url?:string; color?:string }) => (
  <div className="w-28 md:w-40 aspect-[4/3] rounded-xl overflow-hidden border bg-slate-100">
    {url ? (<img src={url} alt="step" className="w-full h-full object-cover" />) : (<div className="w-full h-full" style={{ backgroundColor: color || '#E5E7EB' }} />)}
  </div>
);

const IngredientThumb = ({ url, label }:{ url?:string; label:string }) => (
  <div className="w-16 h-16 rounded-lg overflow-hidden border bg-slate-100 shrink-0" aria-hidden={!url}>
    {url ? <img src={url} alt={label} className="w-full h-full object-cover"/> : <div className="w-full h-full"/>}
  </div>
);

const IngredientList = ({ authentic }:{ authentic:Ingredient[] }) => (
  <div className="w-full">
    <ul className="space-y-2">
      {authentic.map((it, idx)=> (
        <li key={idx} className="flex items-center justify-between gap-3 bg-white rounded-xl border p-3">
          <div className="flex items-center gap-3 min-w-0 flex-1">
            <IngredientThumb url={it.image} label={it.label} />
            <div className="min-w-0">
              <div className="font-medium text-slate-800 truncate">{it.label} {it.brand? <span className="text-slate-500 font-normal">（{it.brand}）</span>:null}</div>
              {it.note? <div className="text-xs text-slate-500 mt-0.5 line-clamp-2">{it.note}</div>:null}
            </div>
          </div>
          <div className="text-sm text-slate-600 flex items-center gap-3">
            {it.amount? <span className="whitespace-nowrap">{it.amount}</span>:null}
            {it.link? <a href={it.link} className="text-red-600 hover:underline">加入購物車 →</a>:null}
          </div>
        </li>
      ))}
    </ul>
  </div>
);

const StepBlock = ({ step, index }:{ step:Step; index:number }) => {
  const COLORS = ['#FDE68A','#BFDBFE','#FBCFE8','#C7D2FE','#A7F3D0','#FEE2E2'];
  const color = COLORS[index % COLORS.length];
  return (
    <div className="bg-white rounded-2xl border p-4 flex items-start gap-4 justify-between">
      <div className="flex-1">
        <div className="flex items-center gap-3 mb-2">
          <div className="w-8 h-8 rounded-full bg-slate-900 text-white grid place-items-center text-sm">{index+1}</div>
          <HeatBadge level={step.heat || "med"} />
          {step.time? <span className="text-xs text-slate-600">⏱ {step.time}</span>:null}
        </div>
        <p className="text-slate-800 leading-relaxed">{step.text}</p>
        {step.tip? <p className="mt-2 text-xs text-amber-700 bg-amber-50 border border-amber-200 rounded px-2 py-1 inline-block">雷點：{step.tip}</p>:null}
      </div>
      <StepImage url={step.image} color={color} />
    </div>
  );
};

// ---------- Layout & Pages ----------
const ScrollToTop = () => {
  const { pathname } = useLocation();
  useEffect(()=>{ window.scrollTo({ top: 0 }); }, [pathname]);
  return null;
};

const Header = () => (
  <header className="sticky top-0 z-30 backdrop-blur bg-white/80 border-b">
    <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
      <Link to="/" className="font-extrabold tracking-tight text-lg text-slate-900">K家食堂 · 韓料嚴選所</Link>
      <nav className="flex items-center gap-4 text-sm text-slate-700">
        <a className="hover:text-red-600" href="#recipes">食譜</a>
        <a className="hover:text-red-600" href="#guides">食材指南</a>
      </nav>
    </div>
  </header>
);

const RecipeCard = ({ data }:{ data:Recipe }) => (
  <Link to={`/recipe/${data.id}`} className="group text-left bg-white rounded-2xl border overflow-hidden hover:shadow-md transition">
    <div className="aspect-video w-full bg-slate-100 overflow-hidden">
      <img src={data.hero} alt={data.title} className="w-full h-full object-cover group-hover:scale-[1.03] transition"/>
    </div>
    <div className="p-4 space-y-2">
      <div className="flex items-center gap-2 text-xs text-slate-600">
        <span className="px-2 py-0.5 rounded-full bg-slate-100">⏱ {data.minutes} 分</span>
        <span className="px-2 py-0.5 rounded-full bg-slate-100">難度 {data.difficulty}</span>
        <span className="px-2 py-0.5 rounded-full bg-slate-100">{data.servings} 人份</span>
      </div>
      <h3 className="font-semibold text-slate-900">{data.title}</h3>
      {data.shortDescription? <p className="text-sm text-slate-600">{data.shortDescription}</p>:null}
    </div>
  </Link>
);

const HomePage = () => (
  <main className="max-w-6xl mx-auto px-4 py-8">
    <section id="hero" className="mb-8">
      <div className="bg-gradient-to-br from-red-50 to-amber-50 border rounded-2xl p-6 flex flex-col md:flex-row items-center gap-6">
        <div className="flex-1">
          <h1 className="text-2xl md:text-3xl font-extrabold tracking-tight text-slate-900">韓國家常味，用台灣廚房複製</h1>
          <p className="mt-2 text-slate-700">雙軌食譜（正宗｜在地）＋一鍵採買（Coupang）。味道到位、流程不繞路。</p>
          <div className="mt-4 flex gap-2">
            <a href="#recipes" className="px-4 py-2 rounded-lg bg-slate-900 text-white text-sm">看食譜</a>
          </div>
        </div>
        <div className="w-full md:w-80"></div>
      </div>
    </section>

    <section id="recipes" className="mb-10">
      <div className="flex items-end justify-between mb-4">
        <h2 className="text-xl font-bold text-slate-900">首發食譜</h2>
        <p className="text-sm text-slate-600">15–30 分完成 · 初學者友善</p>
      </div>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {DB.recipes.map(r=> <RecipeCard key={r.id} data={r} />)}
      </div>
    </section>

    <section id="guides" className="mb-10">
      <div className="flex items-end justify-between mb-3">
        <h2 className="text-xl font-bold text-slate-900">食材指南（即將推出）</h2>
        <a className="text-sm text-red-600" href="#">查看全部 →</a>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="rounded-2xl border p-4 bg-white">고추장 選購與品牌比較（甜度/發酵感）</div>
        <div className="rounded-2xl border p-4 bg-white">韓式醬油（真/味）怎麼選</div>
        <div className="rounded-2xl border p-4 bg-white">辣椒粉粗細對風味的影響</div>
      </div>
    </section>

    <footer className="py-10 text-center text-sm text-slate-500">
      <AffiliateNotice />
      <p className="mt-2">© {new Date().getFullYear()} K-Home. All rights reserved.</p>
    </footer>
  </main>
);

const RecipeDetail = ({ recipe }:{ recipe:Recipe }) => {
  const jsonLd = useMemo(()=>({
    "@context":"https://schema.org","@type":"Recipe","name":recipe.title,
    "recipeYield": `${recipe.servings} 份`,
    "totalTime": `PT${recipe.minutes}M`,
    "recipeIngredient": recipe.authentic.map(i=> `${i.label}${i.amount?` ${i.amount}`:""}`),
    "recipeInstructions": recipe.steps.map((s,idx)=>({"@type":"HowToStep","text":`${idx+1}. ${s.text}`})),
    "image": recipe.hero
  }),[recipe]);

  const nav = useNavigate();

  return (
    <main className="max-w-5xl mx-auto px-4 pb-20">
      <button onClick={()=>nav(-1)} className="mt-6 text-sm text-slate-600 hover:text-red-600">← 返回</button>

      <article className="mt-4">
        <div className="rounded-2xl overflow-hidden border bg-white">
          <img src={recipe.hero} alt={recipe.title} className="w-full max-h-[460px] object-cover"/>
        </div>
        <div className="mt-4 flex flex-col md:flex-row gap-6">
          <div className="flex-1 space-y-4">
            <h1 className="text-2xl font-extrabold text-slate-900">{recipe.title}</h1>
            <div className="flex items-center gap-2 text-xs text-slate-600">
              <span className="px-2 py-0.5 rounded-full bg-slate-100">⏱ {recipe.minutes} 分</span>
              <span className="px-2 py-0.5 rounded-full bg-slate-100">難度 {recipe.difficulty}</span>
              <span className="px-2 py-0.5 rounded-full bg-slate-100">{recipe.servings} 人份</span>
            </div>
            <p className="text-slate-700">{recipe.shortDescription}</p>

            <div className="rounded-2xl border p-4">
              <h3 className="font-semibold mb-3 text-slate-900">味道指標</h3>
              <FlavorMeter profile={recipe.flavor} />
            </div>

            <div className="rounded-2xl border p-4">
              <h3 className="font-semibold mb-3 text-slate-900">材料（正宗）</h3>
              <AffiliateNotice />
              <div className="mt-3">
                <IngredientList authentic={recipe.authentic} />
              </div>
            </div>

            <div className="rounded-2xl border p-4">
              <h3 className="font-semibold mb-3 text-slate-900">步驟</h3>
              <div className="space-y-3">
                {recipe.steps.map((s, i)=> <StepBlock key={i} step={s} index={i} />)}
              </div>
            </div>

            <div className="rounded-2xl border p-4">
              <h3 className="font-semibold mb-2 text-slate-900">小祕訣</h3>
              <ul className="list-disc pl-5 text-sm text-slate-700 space-y-1">
                <li>「持續小泡」＝小火；湯面偶發小泡即可。</li>
                <li>年糕需先浸泡，避免外硬內芯（拌勻時輕推防沾底）。</li>
              </ul>
            </div>
          </div>

          <aside className="w-full md:w-64 space-y-4">
            <div className="rounded-2xl border p-4 bg-white">
              <div className="font-semibold text-slate-900 mb-1">相關推薦</div>
              <ul className="text-sm list-disc pl-5 text-slate-700 space-y-1">
                <li><a className="hover:text-red-600" href="#">고추장 品牌比較</a></li>
                <li><a className="hover:text-red-600" href="#">辣椒粉 粗細差異</a></li>
                <li><a className="hover:text-red-600" href="#">昆布/鯷魚 高湯包怎麼選</a></li>
              </ul>
            </div>
          </aside>
        </div>
      </article>

      <script type="application/ld+json" dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }} />
    </main>
  );
};

const RecipeRoute = () => {
  const { id } = useParams();
  const recipe = DB.recipes.find(r=> r.id === id);
  if(!recipe){
    return (
      <main className="max-w-3xl mx-auto px-4 py-20 text-center">
        <h1 className="text-2xl font-bold text-slate-900">找不到這道食譜</h1>
        <p className="text-slate-600 mt-2">請返回首頁查看其他內容。</p>
        <div className="mt-6"><Link className="text-red-600 underline" to="/">返回首頁</Link></div>
      </main>
    );
  }
  return <RecipeDetail recipe={recipe} />;
};

const AppShell = () => (
  <div className="min-h-dvh bg-gradient-to-b from-white to-slate-50 text-slate-900">
    <Header />
    <ScrollToTop />
    <Routes>
      <Route path="/" element={<HomePage/>} />
      <Route path="/recipe/:id" element={<RecipeRoute/>} />
      <Route path="*" element={<main className="max-w-3xl mx-auto px-4 py-20 text-center"><h1 className="text-2xl font-bold">頁面不存在</h1><div className="mt-6"><Link className="text-red-600 underline" to="/">返回首頁</Link></div></main>} />
    </Routes>
  </div>
);

// ---------- Self-tests ----------
function runSelfTests(){
  const assert = (cond:boolean, msg:string) => { if(!cond){ throw new Error(`[SelfTest] ${msg}`);} };

  // Data checks
  DB.recipes.forEach(r=>{
    assert(!!r.id && !!r.title, `Recipe id/title missing`);
    assert(Array.isArray(r.authentic) && r.authentic.length>0, `Recipe ${r.id} authentic ingredients missing`);
    r.steps.forEach((s, i)=>{
      assert(!!s.text, `Recipe ${r.id} step #${i+1} text missing`);
      if(s.heat){ assert(["low","med","high"].includes(s.heat), `Recipe ${r.id} step #${i+1} heat invalid`); }
    });
  });

  // Routing checks (basic)
  setTimeout(()=>{
    try {
      // 1) Home has recipe cards linking to /recipe/:id
      const link = document.querySelector('a[href="/recipe/kimchi-stew"]') as HTMLAnchorElement | null;
      assert(!!link, 'Home link to /recipe/kimchi-stew not found');

      // 2) Simulate navigation by clicking the link
      link!.click();

      // allow router to render
      setTimeout(()=>{
        try {
          assert(window.location.pathname.includes('/recipe/'), 'URL did not update to /recipe/:id');
          const title = document.querySelector('h1');
          assert(!!title && /泡菜鍋/.test(title!.textContent || ''), 'Recipe detail title not rendered');
          (window as any).__KHOME_TESTS__ = { passed: true, routes: true };
          console.info('K-Home router self-tests passed', (window as any).__KHOME_TESTS__);
        } catch (e) { console.error(e); }
      }, 0);
    } catch (e) { console.error(e); }
  }, 0);
}

export default function App(){
  useEffect(()=>{ try{ runSelfTests(); } catch(e){ console.error(e); } },[]);
  return (
    <BrowserRouter>
      <AppShell />
    </BrowserRouter>
  );
}
